<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use App\Models\EvaluationSetting;
use App\Models\EvaluationRubricGroup;
use App\Models\EvaluationRubricIndicator;
use App\Models\EvaluationScore;
// Optional: ganti sesuai model mahasiswa/relasi kelompok Anda
use App\Models\Mahasiswa;

class PenilaianEvaluasiController extends Controller
{
    /**
     * Halaman rekap: tampilkan nilai per mahasiswa untuk suatu sesi.
     */
    public function rekap(int $sesiId)
    {
        // Ambil daftar mahasiswa sesuai kebutuhan Anda.
        // Contoh paling sederhana: semua mahasiswa aktif.
        $members = Mahasiswa::select('id','nim','nama_mahasiswa')->orderBy('nim')->get();

        $rekap = $this->compute($sesiId, $members->pluck('id'));

        return view('admin.evaluasi.rekap', [
            'sesiId'  => $sesiId,
            'members' => $members,
            'rekap'   => $rekap,
        ]);
    }

    /**
     * Simpan/ubah skor 1 indikator (ajax) dan kembalikan rekap terbaru utk mhs tsb.
     * Request: sesi_id, mahasiswa_id, indicator_code, score (0..100), notes(optional)
     */
    public function saveScore(Request $r)
    {
        $data = $r->validate([
            'sesi_id'        => ['required','integer'],
            'mahasiswa_id'   => ['required','integer'],
            'indicator_code' => ['required','string','exists:evaluation_rubric_indicators,code'],
            'score'          => ['required','integer','min:0','max:100'],
            'notes'          => ['nullable','string'],
        ]);

        EvaluationScore::updateOrCreate(
            [
                'sesi_id'        => $data['sesi_id'],
                'mahasiswa_id'   => $data['mahasiswa_id'],
                'indicator_code' => $data['indicator_code'],
            ],
            [
                'score'        => $data['score'],
                'evaluated_by' => optional($r->user())->id,
                'notes'        => $data['notes'] ?? null,
            ]
        );

        // Hitung ulang untuk 1 mahasiswa
        $rekap = $this->compute($data['sesi_id'], [$data['mahasiswa_id']]);
        return response()->json([
            'success' => true,
            'rekap'   => $rekap[$data['mahasiswa_id']] ?? null,
        ]);
    }

    /**
     * FUNGSI PERHITUNGAN (tanpa service).
     * Menghasilkan:
     * [
     *   mhs_id => [
     *     'ap' => int, 'dosen' => int, 'mitra' => int,
     *     'proyek' => int, 'akhir' => int,
     *     'weights' => ['dosen'=>80,'mitra'=>20,'kelompok'=>70,'ap'=>30]
     *   ],
     *   ...
     * ]
     */
    protected function compute(int $sesiId, $mahasiswaIds): array
    {
        $mahasiswaIds = collect($mahasiswaIds)->values();

        // Ambil indikator & grup (dinamis – sesuai DB)
        /** @var Collection<string,\App\Models\EvaluationRubricIndicator> $inds */
        $inds = EvaluationRubricIndicator::with('group')->get()->keyBy('code');

        $gDosen = EvaluationRubricGroup::where('code','project_dosen')->first();
        $gMitra = EvaluationRubricGroup::where('code','project_mitra')->first();

        $wKelompok = (int) EvaluationSetting::get('w_kelompok', 70); // Proyek
        $wAP       = (int) EvaluationSetting::get('w_ap', 30);       // AP

        // Ambil semua skor terkait sesi & mahasiswa yang diminta
        $scores = EvaluationScore::query()
            ->where('sesi_id', $sesiId)
            ->whereIn('mahasiswa_id', $mahasiswaIds)
            ->get()
            ->groupBy(['mahasiswa_id','indicator_code']); // [mhs][code] => collect(rows)

        $out = [];

        foreach ($mahasiswaIds as $mhsId) {
            $byInd = $scores->get($mhsId) ?? collect();

            // ====== NA AP
            [$apWeighted, $apTotal] = [0, 0];
            foreach ($inds as $ind) {
                if ($ind->group_code !== 'ap') continue;
                $w = (int)$ind->weight;
                $v = (int) optional($byInd->get($ind->code))->first()->score ?? 0;
                $apWeighted += $v * $w;
                $apTotal    += $w;
            }
            $naAP = $apTotal ? (int) round($apWeighted / $apTotal) : 0;

            // ====== NA Proyek - Dosen
            [$dWeighted, $dTotal] = [0, 0];
            foreach ($inds as $ind) {
                if ($ind->group_code !== 'project_dosen') continue;
                $w = (int)$ind->weight;
                $v = (int) optional($byInd->get($ind->code))->first()->score ?? 0;
                $dWeighted += $v * $w;
                $dTotal    += $w;
            }
            $naDosen = $dTotal ? (int) round($dWeighted / $dTotal) : 0;

            // ====== NA Proyek - Mitra
            [$mWeighted, $mTotal] = [0, 0];
            foreach ($inds as $ind) {
                if ($ind->group_code !== 'project_mitra') continue;
                $w = (int)$ind->weight;
                $v = (int) optional($byInd->get($ind->code))->first()->score ?? 0;
                $mWeighted += $v * $w;
                $mTotal    += $w;
            }
            $naMitra = $mTotal ? (int) round($mWeighted / $mTotal) : 0;

            // ====== NA Hasil Proyek (gabungan Dosen x 80%, Mitra x 20% – dinamis dari tabel group)
            $wDosen = $gDosen ? (int)$gDosen->weight : 80;
            $wMitra = $gMitra ? (int)$gMitra->weight : 20;
            $naProyek = (int) round($naDosen * $wDosen/100 + $naMitra * $wMitra/100);

            // ====== Nilai Akhir (Proyek vs AP)
            $nilaiAkhir = (int) round($naProyek * $wKelompok/100 + $naAP * $wAP/100);

            $out[$mhsId] = [
                'ap'      => $naAP,
                'dosen'   => $naDosen,
                'mitra'   => $naMitra,
                'proyek'  => $naProyek,
                'akhir'   => $nilaiAkhir,
                'weights' => [
                    'dosen'    => $wDosen,
                    'mitra'    => $wMitra,
                    'kelompok' => $wKelompok,
                    'ap'       => $wAP,
                ],
            ];
        }

        return $out;
    }
}

